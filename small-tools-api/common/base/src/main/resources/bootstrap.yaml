# ================================== ↓↓↓↓↓↓ small-tools配置 ↓↓↓↓↓↓ ==================================
small-tools:
  # 相关组件服务通用ip
  ip: 127.0.0.1
  # mysql数据源连接参数
  mysql:
    # MySQL在高版本需要指明是否进行SSL连接 解决则加上 &useSSL=false
    # &serverTimezone=Asia/Shanghai ：解决fastjson时差13小时问题
    url-params: ?allowMultiQueries=true&useUnicode=true&characterEncoding=UTF8&zeroDateTimeBehavior=convertToNull&useSSL=false&serverTimezone=Asia/Shanghai
    master:
      ip: ${small-tools.ip}
      port: 3306
      db-name: small-tools
      username: root
      password: root
      url-params: ${small-tools.mysql.url-params}
    slave-1:
      ip: ${small-tools.ip}
      port: 3306
      username: root
      password: root
      url-params: ${small-tools.mysql.url-params}
    db-test:
      ip: ${small-tools.ip}
      port: 3306
      db-name: demo
      username: root
      password: root
      url-params: ${small-tools.mysql.url-params}
  # 开启sql日志，默认关闭
  mybatis-plus-sql-log: true
  # 关闭api日志，默认关闭
  api-log: false
  # ========================== ↓↓↓↓↓↓  第三方授权配置 ↓↓↓↓↓↓ ==========================
  #  gitee申请地址：https://gitee.com/oauth/applications
  #  github申请地址：https://github.com/settings/developers
  #  qq申请地址：https://connect.qq.com/manage.html#/
  thirdpartOauth:
    redirectUrlPrefix: http://${small-tools.ip}:1218
    webRedirectUrl: http://${small-tools.ip}:8080/#/login?redirect=dashboard&ifThirdpartOauth=true&token=
    webBindRedirectUrl: http://${small-tools.ip}:8080/#/system/personal-center?oauthType=%s&openId=%s
    # 授权账号使用
    gitee:
      clientId: xxxxxx
      clientSecret: xxxxxx
      redirectUri: ${small-tools.thirdpartOauth.redirectUrlPrefix}/system/web/api/oauth/gitee/callback
    github:
      clientId: xxxxxx
      clientSecret: xxxxxx
      redirectUri: ${small-tools.thirdpartOauth.redirectUrlPrefix}/system/web/api/oauth/github/callback
    qq:
      clientId: xxxxxx
      clientSecret: xxxxxx
      redirectUri: ${small-tools.thirdpartOauth.redirectUrlPrefix}/system/web/api/oauth/qq/callback
    # 绑定账号使用
    giteeBind:
      clientId: xxxxxx
      clientSecret: xxxxxx
      redirectUri: ${small-tools.thirdpartOauth.redirectUrlPrefix}/system/web/api/oauth/giteeBind/callback
    githubBind:
      clientId: xxxxxx
      clientSecret: xxxxxx
      redirectUri: ${small-tools.thirdpartOauth.redirectUrlPrefix}/system/web/api/oauth/githubBind/callback


spring:
  # 聚合各个基础组件配置
  profiles:
    include:
      - db
      - feign
      - file
      - log
      - mq
      - redis
      - seata
      - swagger
      - sentinel
      - xxl-job
      - web
      - common # 每个业务服务中的common模块配置文件

  # cloud:
  #   config:
  #     # 相同配置下优先使用本地配置 (注：需在nacos上配置才生效！)
  #     override-none: true
  #     allow-override: true
  #     override-system-properties: false

  # 微服务配置
  cloud:
    nacos:
      discovery:
        server-addr: 127.0.0.1:8848 # nacos服务注册地址
        register-enabled: true # 是否注册到注册中心上，默认true，若为false则不会注册到注册中心，但是可以从注册中心获取服务列表
        namespace: ${spring.profiles.active}   # 命名空间
        group: small-tools                     # 分组
        username: nacos
        password: nacos
        metadata:
          #当前实例版本
          version: ${spring.cloud.client.ip-address}
      config:
        server-addr: ${spring.cloud.nacos.discovery.server-addr}  # 配置中心地址
        namespace: ${spring.cloud.nacos.discovery.namespace}      # 命名空间
        group: ${spring.cloud.nacos.discovery.group}              # 分组
        # dataId完整格式: ${prefix}-${spring.profiles.active}.${file-extension}
        prefix: ${spring.application.name}  # 默认为`spring.application.name`的值
        file-extension: yml                 # 配置文件格式
        refresh-enabled: true               # 开启自动刷新配置
        # 指定要读取共享配置文件的DataID,多个文件用`,`分隔
        #        shared-dataids: common-${spring.profiles.active}.${spring.cloud.nacos.config.file-extension}
        # 指定共享配置文件支持自动刷新
        #        refreshable-dataids: ${spring.cloud.nacos.config.shared-dataids}
        # 指定共享配置文件+自动刷新配置
        extension-configs:
          - data-id: common.${spring.cloud.nacos.config.file-extension}
            group: ${spring.cloud.nacos.discovery.group}
            refresh: true
        username: ${spring.cloud.nacos.discovery.username}
        password: ${spring.cloud.nacos.discovery.password}


  lifecycle:
    timeout-per-shutdown-phase: 30s # 设置缓冲期，最大等待时间（即超时间后，无论线程任务是否执行完毕都会停机处理，需合理设置哦）
  servlet:
    multipart:
      enabled: true # 是否开启文件上传支持，默认为true
      #      location: E:/tmp # 指定文件上传路径 【注：文件路径必须存在！  windows： "E:/tmp" liunx： "/tmp"】
      max-file-size: 50MB # 指定文件大小最大值，默认1MB
      max-request-size: 100MB # 指定每次请求的最大值，默认为10MB
      file-size-threshold: 0 # 设定文件写入磁盘的阈值，单位为MB或KB，默认为0。表示收到文件到达这么大后，不在放入缓存，而是写入临时文件
  mvc:
    throw-exception-if-no-handler-found: true # 关闭springboot的异常自动资源映射，让其抛出异常
  web:
    resources:
      add-mappings: true # 是否开启默认的资源处理，默认为true

# 服务器配置
server:
  servlet:
    #    context-path: /api
    #    application-display-name: SmallTools
    encoding:
      charset: UTF-8
      force: true
  # 下面是配置undertow作为服务器的参数
  # undertow:
  #   # 是否分配的直接内存(NIO直接分配的堆外内存)
  #   direct-buffers: true
  #   # 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理
  #   # 每块buffer的空间大小,越小的空间被利用越充分，不要设置太大，以免影响其他应用，合适即可
  #   buffer-size: 1024
  #   threads:
  #     io: 4        # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程 （不要设置过大，如果过大，启动项目会报错：打开文件数过多）
  #     worker: 20   # 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统线程执行任务的阻塞系数，默认值是IO线程数*8
  shutdown: graceful # 开启优雅停机，默认`IMMEDIATE`是立即关机


management:
  endpoints:
    web:
      exposure:
        include: '*'  # 暴露监控端点
#  security:
#    enabled: false   # 关闭安全验证


# ========================== ↓↓↓↓↓↓  netty-socketio配置 ↓↓↓↓↓↓ ==========================
socketio:
  host: ${small-tools.ip}  # 【注： 部署时写真实ip，不要写127.0.0.1，前端连接不上】
  port: 8888
  # 设置最大每帧处理数据的长度，防止他人利用大数据来攻击服务器
  maxFramePayloadLength: 1048576
  # 设置http交互最大内容长度
  maxHttpContentLength: 1048576
  # socket连接数大小（如只监听一个端口boss线程组为1即可）
  bossCount: 1
  workCount: 100
  allowCustomRequests: true
  # 协议升级超时时间（毫秒），默认10秒。HTTP握手升级为ws协议超时时间
  upgradeTimeout: 1000000
  # Ping消息超时时间（毫秒），默认60秒，这个时间间隔内没有接收到心跳消息就会发送超时事件
  pingTimeout: 6000000
  # Ping消息间隔（毫秒），默认25秒。客户端向服务器发送一条心跳消息间隔
  pingInterval: 25000
