version: '3'

# 网桥 -> 方便相互通讯
networks:
  small-tools:
    ipam:
      driver: default
      config:
        - subnet: "172.22.0.0/24"

services:
  mysql:
    image: registry.cn-hangzhou.aliyuncs.com/zhengqing/mysql:5.7  # 原镜像`mysql:5.7`
    container_name: mysql5.7                                      # 容器名
    restart: unless-stopped                                       # 指定容器退出后的重启策略为始终重启，但是不考虑在Docker守护进程启动时就已经停止了的容器
    volumes:                                                      # 数据卷挂载路径设置,将本机目录映射到容器目录
      - "./mysql5.7/my.cnf:/etc/mysql/my.cnf"
      - "./mysql5.7/data:/var/lib/mysql"
      #      - "./mysql5.7/conf.d:/etc/mysql/conf.d"
      - "./mysql5.7/log/mysql/error.log:/var/log/mysql/error.log"
      - "./mysql5.7/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d" # 可执行初始化sql脚本的目录 -- tips:`/var/lib/mysql`目录下无数据的时候才会执行(即第一次启动的时候才会执行)
    environment:                        # 设置环境变量,相当于docker run命令中的-e
      TZ: Asia/Shanghai
      LANG: en_US.UTF-8
      MYSQL_ROOT_PASSWORD: root         # 设置root用户密码
      MYSQL_DATABASE: demo              # 初始化的数据库名称
    ports:                              # 映射端口
      - "3306:3306"
    hostname: mysql
    networks:
      small-tools:
        ipv4_address: 172.22.0.10
  # ----------------------------------------------------------------------------------------------------------------------------
  nacos:
    image: registry.cn-hangzhou.aliyuncs.com/zhengqing/nacos-server:2.0.3    # 原镜像`nacos/nacos-server:2.0.3`
    container_name: nacos_server                                 # 容器名为'nacos_server'
    restart: unless-stopped                                      # 指定容器退出后的重启策略为始终重启，但是不考虑在Docker守护进程启动时就已经停止了的容器
    #    env_file:
    #      - ./nacos_2.0.3/env/nacos-standlone-mysql.env
    volumes:                                                     # 数据卷挂载路径设置,将本机目录映射到容器目录
      - "./nacos_2.0.3/logs:/home/nacos/logs"
      - "./nacos_2.0.3/init.d/custom.properties:/home/nacos/init.d/custom.properties"
      - "./nacos_2.0.3/conf/application.properties:/home/nacos/conf/application.properties"
      # mysql8版本以上才需要额外此配置信息 -- 无效配置，暂时性保留吧...
    #      - "./nacos_2.0.3/plugins/mysql:/home/nacos/plugins/mysql"
    environment:                        # 设置环境变量,相当于docker run命令中的-e
      - PREFER_HOST_MODE=hostname                 # 如果支持主机名可以使用hostname,否则使用ip，默认也是ip
      - MODE=standalone                           # 单机模式启动
      - SPRING_DATASOURCE_PLATFORM=mysql          # 数据源平台 仅支持mysql或不保存empty
      - MYSQL_SERVICE_HOST=mysql                  # 注：这里不能为`127.0.0.1`或`localhost`方式！！！
      - MYSQL_SERVICE_DB_NAME=nacos_config        # 所需sql脚本位于 `nacos_xxx/nacos-mysql.sql`
      # mysql5.7 连接参数
      #      - MYSQL_SERVICE_DB_PARAM=characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useSSL=false
      # mysql8 连接参数
      - MYSQL_SERVICE_DB_PARAM=characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=Asia/Shanghai
      - MYSQL_SERVICE_PORT=3306
      - MYSQL_SERVICE_USER=root
      - MYSQL_SERVICE_PASSWORD=root
      # TODO 修改JVM调优参数
      - JVM_XMS=128m   #-Xms default :2g
      - JVM_XMX=128m   #-Xmx default :2g
      - JVM_XMN=64m    #-Xmn default :1g
      - JVM_MS=32m     #-XX:MetaspaceSize default :128m
      - JVM_MMS=32m    #-XX:MaxMetaspaceSize default :320m
      - NACOS_DEBUG=n  #是否开启远程debug，y/n，默认n
      - TOMCAT_ACCESSLOG_ENABLED=false #是否开始tomcat访问日志的记录，默认false
    ports:                              # 映射端口  (Nacos2.0版本相比1.X新增了gRPC的通信方式，因此需要增加2个端口：9848、9849)
      - "8848:8848"
      - "9848:9848"
      - "9849:9849"
      - "9555:9555"
    depends_on:
      - mysql
    networks:
      small-tools:
        ipv4_address: 172.22.0.11
    mem_limit: 1000m   # 最大使用内存
  # ----------------------------------------------------------------------------------------------------------------------------
  redis:
    image: registry.cn-hangzhou.aliyuncs.com/zhengqing/redis:6.0.8                    # 镜像'redis:6.0.8'
    container_name: redis                                                             # 容器名为'redis'
    restart: unless-stopped                                                                   # 指定容器退出后的重启策略为始终重启，但是不考虑在Docker守护进程启动时就已经停止了的容器
    command: redis-server /etc/redis/redis.conf --requirepass 123456 --appendonly no # 启动redis服务并添加密码为：123456,默认不开启redis-aof方式持久化配置
    #    command: redis-server --requirepass 123456 --appendonly yes # 启动redis服务并添加密码为：123456,并开启redis持久化配置
    environment:                        # 设置环境变量,相当于docker run命令中的-e
      TZ: Asia/Shanghai
      LANG: en_US.UTF-8
    volumes:                            # 数据卷挂载路径设置,将本机目录映射到容器目录
      - "./redis/data:/data"
      - "./redis/config/redis.conf:/etc/redis/redis.conf"  # `redis.conf`文件内容`http://download.redis.io/redis-stable/redis.conf`
    ports:                              # 映射端口
      - "6379:6379"
    networks:
      small-tools:
        ipv4_address: 172.22.0.12
  # ----------------------------------------------------------------------------------------------------------------------------
  rabbitmq:
    image: registry.cn-hangzhou.aliyuncs.com/zhengqing/rabbitmq:3.9.1-management        # 镜像`rabbitmq:3.9.1-management` 【 注：该版本包含了web控制页面 】
    container_name: rabbitmq            # 容器名为'rabbitmq'
    hostname: my-rabbit
    restart: unless-stopped                                       # 指定容器退出后的重启策略为始终重启，但是不考虑在Docker守护进程启动时就已经停止了的容器
    environment: # 设置环境变量,相当于docker run命令中的-e
      TZ: Asia/Shanghai
      LANG: en_US.UTF-8
    volumes: # 数据卷挂载路径设置,将本机目录映射到容器目录
      - "./rabbitmq/config/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf"
      #      - "./rabbitmq/config/10-default-guest-user.conf:/etc/rabbitmq/conf.d/10-default-guest-user.conf"
      #      - "./rabbitmq/data:/var/lib/rabbitmq"
      - "./rabbitmq/plugins/rabbitmq_delayed_message_exchange-3.9.0.ez:/opt/rabbitmq/plugins/rabbitmq_delayed_message_exchange-3.9.0.ez"
    #      - "./rabbitmq/log:/var/log/rabbitmq"
    ports: # 映射端口
      - "5672:5672"
      - "15672:15672"
    networks:
      small-tools:
        ipv4_address: 172.22.0.13
  # ----------------------------------------------------------------------------------------------------------------------------
  sentinel:
    image: registry.cn-hangzhou.aliyuncs.com/zhengqing/sentinel-dashboard:1.8.2
    container_name: sentinel                                     # 容器名为'sentinel'
    restart: unless-stopped                                      # 指定容器退出后的重启策略为始终重启，但是不考虑在Docker守护进程启动时就已经停止了的容器
    environment:                                                 # 设置环境变量,相当于docker run命令中的-e
      TZ: Asia/Shanghai
      LANG: en_US.UTF-8
    ports:                                                       # 映射端口
      - "8858:8858"
    networks:
      small-tools:
        ipv4_address: 172.22.0.14
  # ----------------------------------------------------------------------------------------------------------------------------
  xxl-job-admin:
    image: registry.cn-hangzhou.aliyuncs.com/zhengqing/xxl-job-admin:2.3.0 # 原镜像`xuxueli/xxl-job-admin:2.3.0`
    container_name: xxl-job-admin
    environment:
      # TODO 根据自己的配置修改，配置项参考源码文件：/xxl-job/xxl-job-admin/src/main/resources/application.properties
      PARAMS: "--spring.datasource.url=jdbc:mysql://mysql:3306/xxl_job?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&serverTimezone=Asia/Shanghai
               --spring.datasource.username=root
               --spring.datasource.password=root
               --server.servlet.context-path=/xxl-job-admin
               --spring.mail.host=smtp.qq.com
               --spring.mail.port=25
               --spring.mail.username=xxx@qq.com
               --spring.mail.from=xxx@qq.com
               --spring.mail.password=xxx
               --xxl.job.accessToken="
    ports:
      - "9003:8080"
    depends_on:
      - mysql
    networks:
      small-tools:
        ipv4_address: 172.22.0.15
  # ----------------------------------------------------------------------------------------------------------------------------